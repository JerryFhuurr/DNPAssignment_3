@page "/Adults"

@using AdultsClient.Data
@using AdultsClient.Models

@inject IFamiliesService familiesService
@inject NavigationManager NavigationManager

<h2>
    Adult list
</h2>
<p>
    Search by name: <input type="text" @oninput="@((arg) => FilterByName(arg))" style="width:250px"/>
</p>


@if (adults == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!adults.Any())
{
    <p>
        <em>No adults are in this list. Please add some.</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <td>ID</td>
            <td>First name</td>
            <td>Last name</td>
            <td>Job title</td>
            @*<td>Salary</td>
        <td>Hair color</td>
        <td>Eye color</td>*@
            <td>Age</td>
            @*<td>Weight</td>
        <td>Height</td>
        <td>Sex</td>*@
        </tr>
        </thead>
        <tbody>
        @foreach (var item in adultsToShow)
        {
            <tr>
                <td>@item.Id</td>
                <td>@item.FirstName</td>
                <td>@item.LastName</td>
                <td>@item.JobTitle.JobTitle</td>
                @*<td>@item.JobTitle.Salary</td>
            <td>@item.HairColor</td>
            <td>@item.EyeColor</td>*@
                <td>@item.Age</td>
                @*<td>@item.Weight</td>
            <td>@item.Height</td>
            <td>@item.Sex</td>*@
                <AuthorizeView Policy="SecurityLevel2" >
                    <td>
                        <button @onclick="@(() => RemoveAdult(item.Id))">
                            <i class="oi oi-trash" style="color:red"/>
                        </button>
                    </td>
                    <td>
                        <button @onclick="@(() => Edit(item.Id))">
                            <i class="oi oi-pencil" style="color:#1b6ec2"/>
                        </button>
                    </td>
                    </AuthorizeView>
            </tr>
        }
        </tbody>
    </table>
}

@code
{
    private IList<Adult> adults;
    private IList<Adult> adultsToShow;

    private string? filterByFirstName;
    private string? filterByLastName;


    protected override async Task OnInitializedAsync()
    {
        Task<IList<Adult>> getAdultsTask = familiesService.GetAdultsAsync();
        adults = await getAdultsTask;
        adultsToShow = adults;

    // adults = FamiliesData.GetAdults();
    // adults = await FamiliesData.GetAdultsAsync();
    }

    private void FilterByName(ChangeEventArgs changeEventArgs)
    {
        filterByFirstName = null;
        filterByLastName = null;
        try
        {
            filterByFirstName = changeEventArgs.Value.ToString();
            filterByLastName = changeEventArgs.Value.ToString();
        }
        catch (Exception e)
        {
        }
        ExecuteFilter();
    }

    private void ExecuteFilter()
    {
        adultsToShow = adults.Where(a =>
            (filterByFirstName != null && a.FirstName.ToLower().Contains(filterByFirstName.ToLower()) || filterByFirstName == null)
            || (filterByLastName != null && a.LastName.ToLower().Contains(filterByLastName.ToLower()) || filterByLastName == null))
            .ToList();
    }

    private void RemoveAdult(int adult)
    {
        var adultToRemove = adults.First(a => a.Id == adult);
        familiesService.RemoveAdultAsync(adult);
        adults.Remove(adultToRemove);
        adultsToShow.Remove(adultToRemove);
    }

    private void Edit(int id)
    {
        NavigationManager.NavigateTo($"Edit/{id}");
    }

    private void CompletedChange(ChangeEventArgs evt, Adult adult)
    {
        familiesService.UpdateAsync(adult);
    }

}