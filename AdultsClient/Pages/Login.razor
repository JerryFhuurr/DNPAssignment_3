@page "/Login"
@using AdultsClient.Authentification


@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<AuthorizeView>
    <NotAuthorized>
        <div class="form-group col-md-3">
            <label>User name:</label>
            <input type="text" placeholder="user name" @bind-value="username"/>
        </div>
        <div class="form-group col-md-3">
            <label>Password:</label>
            <input type="password" placeholder="password" @bind-value="password"/>
        </div>
        
        @if(errorMessage != null)
        {
            <div class="form-group col-md-3">
                <label style="color:red">@errorMessage</label>
            </div>
        }

        @*<a href="" @onclick="PerformLogin">
            Login
        </a>*@
        <div class="form-group col-md-1">
            <p class="actions">
                <button class="btn btn-outline-dark" @onclick="PerformLogin">Log In</button>
            </p>
            </div>
    </NotAuthorized>
    <Authorized>
        <div class="form-group col-md-3">
        <p class="actions">
            <button class="btn btn-outline-dark" @onclick="PerformLogout">Log Out</button>
        </p>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    private string username;
    private string password;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        username = "";
        password = "";
        errorMessage = "";
    }

    public async Task PerformLogin()
    {
        errorMessage = "";
        try
        {
            await ((CustomAuthenticationStateProvider) AuthenticationStateProvider).ValidateLogin(username, password);
            password = "";
        }
        catch (Exception e)
        {
            if (e.Message == "Internal Server Error")
            {
                errorMessage = "This user and password combination is wrong";
            }
            else
            {
                errorMessage = e.Message;    
            }
            Console.WriteLine(e.Message);
        }
    }

    public async Task PerformLogout()
    {
        errorMessage = "";
        username = "";
        password = "";
        try
        {
            ((CustomAuthenticationStateProvider) AuthenticationStateProvider).Logout();
            // NavigationManager.NavigateTo("/");
            NavigationManager.NavigateTo("/Login");
        }
        catch (Exception e)
        {
        }
    }

}